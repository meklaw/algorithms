import unittest

from src.DataStructures.Set.PowerSet import PowerSet


class TestPowerSet(unittest.TestCase):
    def test_put(self):
        set = PowerSet()
        set.put(1)
        self.assertEqual(set.slots[0], 1)
        self.assertEqual(set.size(), 1)
        set.put(10)
        self.assertEqual(set.slots[0], 1)
        self.assertEqual(set.slots[1], 10)
        self.assertEqual(set.size(), 2)
        set.put(5)
        self.assertEqual(set.slots[0], 1)
        self.assertEqual(set.slots[1], 5)
        self.assertEqual(set.slots[2], 10)
        self.assertEqual(set.size(), 3)
        set.put(0)
        self.assertEqual(set.slots[0], 0)
        self.assertEqual(set.slots[1], 1)
        self.assertEqual(set.slots[2], 5)
        self.assertEqual(set.slots[3], 10)
        self.assertEqual(set.size(), 4)
        set.put(20)
        self.assertEqual(set.slots[0], 0)
        self.assertEqual(set.slots[1], 1)
        self.assertEqual(set.slots[2], 5)
        self.assertEqual(set.slots[3], 10)
        self.assertEqual(set.slots[4], 20)
        self.assertEqual(set.size(), 5)
        set.put(15)
        self.assertEqual(set.slots[0], 0)
        self.assertEqual(set.slots[1], 1)
        self.assertEqual(set.slots[2], 5)
        self.assertEqual(set.slots[3], 10)
        self.assertEqual(set.slots[4], 15)
        self.assertEqual(set.slots[5], 20)
        self.assertEqual(set.size(), 6)

        set = PowerSet()
        for i in range(100, -1, -10):
            set.put(i)
        set.put(-5)
        set.put(1000)
        set.put(1000)
        set.put(900)
        set.put(900)
        set.put(25)
        set.put(25)
        set.put(5)
        set.put(5)
        self.assertEqual(set.slots[0], -5)
        self.assertEqual(set.slots[1], 0)
        self.assertEqual(set.slots[2], 5)
        self.assertEqual(set.slots[len(set.slots) - 1], 1000)
        self.assertEqual(set.slots[len(set.slots) - 2], 900)

    def test_get(self):
        set = PowerSet()
        self.assertEqual(set.get(100), False)
        self.assertEqual(set.get("100"), False)
        set.slots = [5]
        self.assertEqual(set.get(5), True)
        self.assertEqual(set.get(100), False)
        set.slots = [5, 10]
        self.assertEqual(set.get(5), True)
        self.assertEqual(set.get(10), True)
        self.assertEqual(set.get(8), False)
        self.assertEqual(set.get(100), False)
        set.slots = [5, 10, 15]
        self.assertEqual(set.get(5), True)
        self.assertEqual(set.get(10), True)
        self.assertEqual(set.get(15), True)
        self.assertEqual(set.get(0), False)
        self.assertEqual(set.get(3), False)
        self.assertEqual(set.get(8), False)
        self.assertEqual(set.get(13), False)
        self.assertEqual(set.get(100), False)
        set.slots = [5, 10, 15, 20]
        self.assertEqual(set.get(5), True)
        self.assertEqual(set.get(10), True)
        self.assertEqual(set.get(15), True)
        self.assertEqual(set.get(20), True)
        self.assertEqual(set.get(0), False)
        self.assertEqual(set.get(3), False)
        self.assertEqual(set.get(8), False)
        self.assertEqual(set.get(13), False)
        self.assertEqual(set.get(18), False)
        self.assertEqual(set.get(100), False)
        set.slots = [5, 10, 15, 20, 30]
        self.assertEqual(set.get(5), True)
        self.assertEqual(set.get(10), True)
        self.assertEqual(set.get(15), True)
        self.assertEqual(set.get(20), True)
        self.assertEqual(set.get(30), True)
        self.assertEqual(set.get(0), False)
        self.assertEqual(set.get(3), False)
        self.assertEqual(set.get(8), False)
        self.assertEqual(set.get(13), False)
        self.assertEqual(set.get(18), False)
        self.assertEqual(set.get(21), False)
        self.assertEqual(set.get(29), False)
        self.assertEqual(set.get(100), False)

    def test_remove(self):
        set = PowerSet()
        set.slots = []
        self.assertEqual(set.remove(4), False)
        set.slots = [5]
        self.assertEqual(set.remove(4), False)
        self.assertEqual(set.remove(5), True)
        self.assertEqual(set.size(), 0)
        set.slots = [5, 10]
        self.assertEqual(set.remove(4), False)
        self.assertEqual(set.remove(5), True)
        self.assertEqual(set.slots[0], 10)
        self.assertEqual(set.size(), 1)
        set.slots = [0, 5, 10]
        self.assertEqual(set.remove(4), False)
        self.assertEqual(set.remove(5), True)
        self.assertEqual(set.slots[0], 0)
        self.assertEqual(set.slots[1], 10)
        self.assertEqual(set.size(), 2)
        set.slots = [0, 5, 10, 15, 20, 25]
        self.assertEqual(set.remove(-1), False)
        self.assertEqual(set.remove(4), False)
        self.assertEqual(set.remove(3), False)
        self.assertEqual(set.remove(8), False)
        self.assertEqual(set.remove(17), False)
        self.assertEqual(set.remove(21), False)
        self.assertEqual(set.remove(26), False)
        self.assertEqual(set.remove(5), True)
        self.assertEqual(set.remove(20), True)
        self.assertEqual(set.slots[0], 0)
        self.assertEqual(set.slots[1], 10)
        self.assertEqual(set.slots[2], 15)
        self.assertEqual(set.slots[3], 25)
        self.assertEqual(set.size(), 4)

    def test_intersection(self):
        set1 = PowerSet()
        set2 = PowerSet()
        self.assertEqual(set1.intersection(set2).size(), 0)
        set1.put("123")
        set1.put("12345")
        res = set1.intersection(set2)
        self.assertEqual(res.size(), 0)
        self.assertFalse(res.get("123"))
        self.assertFalse(res.get("12345"))
        set2.put("123")
        set2.put("555")
        res = set1.intersection(set2)
        self.assertEqual(res.size(), 1)
        self.assertTrue(res.get("123"))
        self.assertFalse(res.get("12345"))
        self.assertFalse(res.get("555"))

    def test_union(self):
        set1 = PowerSet()
        set2 = PowerSet()
        self.assertEqual(set1.union(set2).size(), 0)
        set1.put("123")
        set1.put("12345")
        res = set1.union(set2)
        self.assertEqual(res.size(), 2)
        self.assertTrue(res.get("123"))
        self.assertTrue(res.get("12345"))
        set2.put("123")
        set2.put("555")
        res = set1.union(set2)
        self.assertEqual(res.size(), 3)
        self.assertTrue(res.get("123"))
        self.assertTrue(res.get("12345"))
        self.assertTrue(res.get("555"))

    def test_difference(self):
        set1 = PowerSet()
        set2 = PowerSet()
        self.assertEqual(set1.difference(set2).size(), 0)
        set1.put("123")
        set1.put("12345")
        res = set1.difference(set2)
        self.assertEqual(res.size(), 2)
        self.assertTrue(res.get("123"))
        self.assertTrue(res.get("12345"))

        set1 = PowerSet()
        set1.put("123")
        set1.put("12345")

        set2 = PowerSet()
        set2.put("123")
        set2.put("555")

        res = set1.difference(set2)
        self.assertEqual(res.size(), 2)
        self.assertTrue(res.get("555"))
        self.assertTrue(res.get("12345"))
        self.assertFalse(res.get("123"))

    def test_issubset(self):
        set1 = PowerSet()
        set2 = PowerSet()
        set1.put("123")
        set1.put("12345")
        set2.put("123")
        self.assertEqual(set1.issubset(set2), True)

    def test_speed(self):
        set1 = PowerSet()
        for i in range(0, 20_000):
            set1.put(i)
